clear all
clc
%% Figure, axes and animated lines
figure
ax = gca;
ax.YGrid = 'on';
ax.XGrid = 'on';
ax.XLabel.String = 'Time';
yyaxis left
ax.YLabel.String = 'YLabel left';
yyaxis right
ax.YLabel.String = 'ylabel right';

% define the handles of the animated lines to plot data in real time
hAnimLinesV.CellVoltage1 = animatedline;
hAnimLinesV.CellVoltage2 = animatedline;
hAnimLinesV.CellVoltage3 = animatedline;
hAnimLinesV.CellVoltage4 = animatedline;
hAnimLinesV.CellVoltage5 = animatedline;
hAnimLinesV.CellVoltage6 = animatedline;

hAnimLinesBS.CellBalSts1 = animatedline;
hAnimLinesBS.CellBalSts2 = animatedline;
hAnimLinesBS.CellBalSts3 = animatedline;
hAnimLinesBS.CellBalSts4 = animatedline;
hAnimLinesBS.CellBalSts5 = animatedline;
hAnimLinesBS.CellBalSts6 = animatedline;

hAnimLinesT.CellTemperature1 = animatedline;
hAnimLinesT.CellTemperature2 = animatedline;
hAnimLinesT.CellTemperature3 = animatedline;
hAnimLinesT.CellTemperature4 = animatedline;
hAnimLinesT.CellTemperature5 = animatedline;
hAnimLinesT.CellTemperature6 = animatedline;
hAnimLinesT.BMSTemperature = animatedline;

hAnimLinesC.BatteryCurrent = animatedline;


%% Define BMSino and DC/DC objects
delete(instrfindall);
test_info=test_setup();

%% Define the timer object

% specifies the properties of the timer object
t = timer('StartDelay', 5, 'Period', 1, 'TasksToExecute', inf, ...
          'ExecutionMode', 'fixedRate',...
          'StartFcn', @T1_Start_Fcn,...
          'TimerFcn',{@T1_trig_Fcn, hAnimLinesV, hAnimLinesT, hAnimLinesC, test_info },...
          'StopFcn',@T1_Stop_Fcn,...
          'ErrorFcn',@T1_Err_Fcn);
      
%% Timer trigger
function T1_trig_Fcn(obj, event, hAnimLinesV, hAnimLinesT, hAnimLinesC, hAnimLinesBS, test_info)
% T1_trig_Fcn
%     disp('in T1_trig_Fcn function')
%     disp(round(toc,1))
   
    % static variable. t_idx is the number of times the trigger function is
    % called
    persistent t_idx
    if isempty(t_idx)
        t_idx = 0;
    end 
    t_idx = t_idx + 1;
    
%% STATE 1
    % Save actual time
    test_info.time(t_idx) = toc;
        
% Disable all balancing mosfets (it's mandatory to accurately measure the 
    % cell's voltage)
    % save old balancing status register before clear
    persistent OldBalSts
    if isempty(OldBalSts)
        OldBalSts = 00000000;
    end
    OldBalSts = test_info.CellBalancingStatus;
    % clear the balancing status register on BMSino
    test_info.BMSino.setBalancingStatus(00000000);
    
% Measure cell temperatures
    test_info.BMSino.getTemperatures();
    test_info.Celltemperatures(:,t_idx) = test_info.BMSino.CellsTemperatures(:);

% Measure battery current
    test_info.B3606.getStatus();
    test_info.BatteryCurrent(t_idx) = test_info.B3603.DCDCoutputCurrent;
    % test_info.BMSino.getCurrent(); %does not work now!
    
% Measure BMS temperature
    test_info.BMSino.getTemperatures();
    test_info.BMSTemperature(t_idx) = test_info.BMSino.BMSTemperature;
    
% Finally wait 50 ms, measure cell voltages and compute battery voltage
    pause(0.05);
    test_info.BMSino.getVoltages();
    test_info.CellVoltage(:, t_idx) = test_info.BMSino.CellsVoltages(:);
    test_info.BatteryVoltage(t_idx) = test_info.BMSino.TotalVoltage;
    
% Restore the balancing register to the previous value since it was cleared
% to measure cells voltages.
    test_info.BMSino.setBalancingStatus(OldBalSts);

%% STATE 2
% Estimate current charge setpoint
    HighestCellVoltage = max(test_info.CellVoltage(:, t_idx));
    ChSetPoint = SetPoint_Estimation(test_info.BMSino, HighestCellVoltage);
    
%% STATE 3
% switch on or off balancing mosfets
    % compute balancing mask
    toWriteCellBalancingStatus = zeros(test_info.CELLS_NUMBER);
    for i=0:test_info.CELLS_NUMBER
        if test_info.CellVoltage(i, t_idx) >= test_info.BMSino.CELL_VOLTAGE_START_BALANCING
            % it's time to balance the i-th cell!
            toWriteCellBalancingStatus(i) = 1;
        else
            % switch off the balancing mosfet on i-th cell
            toWriteCellBalancingStatus(i) = 0;
        end
    end
    
    % write balancing mask to BMSino
    test_info.BMSino.setBalancingStatus(toWriteCellBalancingStatus(i));
    
%% STATE 4
    % check balancing status vector
    test_info.CellBalancingStatus = test_info.BMSino.getBalancingStatus;
    if test_info.CellBalancingStatus ~= toWriteCellBalancingStatus
         disp('error during writing of balancing status register');
    end
    
    
%% STATE 5
% Set the current setpoint already estimated
    test_info.B3606.setCurrent(ChSetPoint);
    
%% STATE 6
% plotta in real time tutti i valori su 2/3 grafici
    
    % Plot in real time the cells values
    addpoints(hAnimLinesV.CellVoltage1, test_info.time(t_idx), test_info.CellVoltage(1,t_idx))
    addpoints(hAnimLinesV.CellVoltage2, test_info.time(t_idx), test_info.CellVoltage(2,t_idx))
    addpoints(hAnimLinesV.CellVoltage3, test_info.time(t_idx), test_info.CellVoltage(3,t_idx))
    addpoints(hAnimLinesV.CellVoltage4, test_info.time(t_idx), test_info.CellVoltage(4,t_idx))
    addpoints(hAnimLinesV.CellVoltage5, test_info.time(t_idx), test_info.CellVoltage(5,t_idx))
    addpoints(hAnimLinesV.CellVoltage6, test_info.time(t_idx), test_info.CellVoltage(6,t_idx))
    
    addpoints(hAnimLinesBS.CellBalSts1, test_info.time(t_idx), test_info.CellBalancingStatus(1,t_idx))
    addpoints(hAnimLinesBS.CellBalSts2, test_info.time(t_idx), test_info.CellBalancingStatus(2,t_idx))
    addpoints(hAnimLinesBS.CellBalSts3, test_info.time(t_idx), test_info.CellBalancingStatus(3,t_idx))
    addpoints(hAnimLinesBS.CellBalSts4, test_info.time(t_idx), test_info.CellBalancingStatus(4,t_idx))
    addpoints(hAnimLinesBS.CellBalSts5, test_info.time(t_idx), test_info.CellBalancingStatus(5,t_idx))
    addpoints(hAnimLinesBS.CellBalSts6, test_info.time(t_idx), test_info.CellBalancingStatus(6,t_idx))
    
    addpoints(hAnimLinesT.CellTemperature1, test_info.time(t_idx), test_info.CellTemperature(1,t_idx))
    addpoints(hAnimLinesT.CellTemperature2, test_info.time(t_idx), test_info.CellTemperature(2,t_idx))
    addpoints(hAnimLinesT.CellTemperature3, test_info.time(t_idx), test_info.CellTemperature(3,t_idx))
    addpoints(hAnimLinesT.CellTemperature4, test_info.time(t_idx), test_info.CellTemperature(4,t_idx))
    addpoints(hAnimLinesT.CellTemperature5, test_info.time(t_idx), test_info.CellTemperature(5,t_idx))
    addpoints(hAnimLinesT.CellTemperature6, test_info.time(t_idx), test_info.CellTemperature(6,t_idx))
    
    addpoints(hAnimLinesT.BMSTemperature, test_info.time(t_idx), test_info.BMSTemperature)
    
    addpoints(hAnimLinesC.BatteryCurrent, test_info.time(t_idx), test_info.BatteryCurrent)
    
    % Update axes
    ax.XLim = time-50; % sembra non funzionare
    drawnow
end
%% Timer Error
function T1_Err_Fcn(obj, event, text_arg)
% T1_Err_Fcn
    disp('in T1_Err_Fcn function')
end
%% Timer Start
function T1_Start_Fcn(obj, event, text_arg)
% T1_Start_Fcn
    disp('Initialization of instruments');
    tic % start stopwatch timer
    
    test_info=test_setup();
end
%% Timer Stop
function T1_Stop_Fcn(obj, event, text_arg)
% T1_Stop_Fcn
    disp('in T1_Stop_Fcn function')
    disp('Total running time is: ')
    disp(round(toc,1))
end

